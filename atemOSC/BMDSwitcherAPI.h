/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_H
#define BMD_BMDSWITCHERAPI_H

#include <CoreFoundation/CoreFoundation.h>
#include <CoreFoundation/CFPlugInCOM.h>
#include <stdint.h>

// Type Declarations

typedef int64_t BMDSwitcherInputId;

// Interface ID Declarations

#define IID_IBMDSwitcherMixEffectBlockCallback           /* 96010829-2029-4DA3-A34B-70368605ABAA */ (REFIID){0x96,0x01,0x08,0x29,0x20,0x29,0x4D,0xA3,0xA3,0x4B,0x70,0x36,0x86,0x05,0xAB,0xAA}
#define IID_IBMDSwitcherMixEffectBlock                   /* 11974D55-45E0-49D8-AE06-EEF4D5F81DF6 */ (REFIID){0x11,0x97,0x4D,0x55,0x45,0xE0,0x49,0xD8,0xAE,0x06,0xEE,0xF4,0xD5,0xF8,0x1D,0xF6}
#define IID_IBMDSwitcherInputCallback                    /* 8E583D89-0BAF-4447-AB8C-6A12CD8724CB */ (REFIID){0x8E,0x58,0x3D,0x89,0x0B,0xAF,0x44,0x47,0xAB,0x8C,0x6A,0x12,0xCD,0x87,0x24,0xCB}
#define IID_IBMDSwitcherInput                            /* 66F3D466-8C8C-4DB4-B313-8DD2EC665DBB */ (REFIID){0x66,0xF3,0xD4,0x66,0x8C,0x8C,0x4D,0xB4,0xB3,0x13,0x8D,0xD2,0xEC,0x66,0x5D,0xBB}
#define IID_IBMDSwitcherInputIterator                    /* 92AB7A73-C6F6-47FC-92A7-C8EEADC9EAAC */ (REFIID){0x92,0xAB,0x7A,0x73,0xC6,0xF6,0x47,0xFC,0x92,0xA7,0xC8,0xEE,0xAD,0xC9,0xEA,0xAC}
#define IID_IBMDSwitcherMixEffectBlockIterator           /* 930BDE3B-4A78-43D0-8FD3-6E82ABA0E117 */ (REFIID){0x93,0x0B,0xDE,0x3B,0x4A,0x78,0x43,0xD0,0x8F,0xD3,0x6E,0x82,0xAB,0xA0,0xE1,0x17}
#define IID_IBMDSwitcherCallback                         /* 6C6E4441-9421-4729-9951-988659E3A44A */ (REFIID){0x6C,0x6E,0x44,0x41,0x94,0x21,0x47,0x29,0x99,0x51,0x98,0x86,0x59,0xE3,0xA4,0x4A}
#define IID_IBMDSwitcher                                 /* 1E8701D0-258F-43ED-9EDC-434FD16E922D */ (REFIID){0x1E,0x87,0x01,0xD0,0x25,0x8F,0x43,0xED,0x9E,0xDC,0x43,0x4F,0xD1,0x6E,0x92,0x2D}
#define IID_IBMDSwitcherDiscovery                        /* A676047A-D3A4-44B1-B8B5-31D7289D266A */ (REFIID){0xA6,0x76,0x04,0x7A,0xD3,0xA4,0x44,0xB1,0xB8,0xB5,0x31,0xD7,0x28,0x9D,0x26,0x6A}

/* Enum BMDSwitcherPropertyId - IBMDSwitcher Property ID */

typedef uint32_t BMDSwitcherPropertyId;
enum _BMDSwitcherPropertyId {
    bmdSwitcherPropertyIdProductName                             = 'pdnm'	// String type, Get only
};

/* Enum BMDSwitcherInputPropertyId - IBMDSwitcherInput Property ID */

typedef uint32_t BMDSwitcherInputPropertyId;
enum _BMDSwitcherInputPropertyId {
    bmdSwitcherInputPropertyIdPortType                           = 'prtp',	// Int type (BMDSwitcherPortType), Get only
    bmdSwitcherInputPropertyIdInputAvailability                  = 'avlb',	// Int type (BMDSwitcherInputAvailability), Get only
    bmdSwitcherInputPropertyIdShortName                          = 'shnm',	// String type, Get only
    bmdSwitcherInputPropertyIdLongName                           = 'lgnm'	// String type, Get only
};

/* Enum BMDSwitcherPortType - IBMDSwitcherInput Port Types */

typedef uint32_t BMDSwitcherPortType;
enum _BMDSwitcherPortType {
    bmdSwitcherPortTypeExternal                                  = 'extn',
    bmdSwitcherPortTypeBlack                                     = 'blak',
    bmdSwitcherPortTypeColorBars                                 = 'colb',
    bmdSwitcherPortTypeColorGenerator                            = 'colg',
    bmdSwitcherPortTypeMediaPlayerFill                           = 'mpfl',
    bmdSwitcherPortTypeMediaPlayerCut                            = 'mpct',
    bmdSwitcherPortTypeSuperSource                               = 'ssrc',
    bmdSwitcherPortTypeMixEffectBlockOutput                      = 'mebo',
    bmdSwitcherPortTypeAuxOutput                                 = 'auxo'
};

/* Enum BMDSwitcherInputAvailability - IBMDSwitcherInput availablity bits */

typedef uint32_t BMDSwitcherInputAvailability;
enum _BMDSwitcherInputAvailability {
    bmdSwitcherInputAvailabilityMixEffectBlock0                  = 0x00000001,
    bmdSwitcherInputAvailabilityMixEffectBlock1                  = 0x00000002
};

/* Enum BMDSwitcherMixEffectBlockPropertyId - IBMDSwitcherMixEffectBlock Property ID */

typedef uint32_t BMDSwitcherMixEffectBlockPropertyId;
enum _BMDSwitcherMixEffectBlockPropertyId {
    bmdSwitcherMixEffectBlockPropertyIdProgramInput              = 'pgip',	// Int type (BMDSwitcherInputId), Get/Set
    bmdSwitcherMixEffectBlockPropertyIdPreviewInput              = 'pvip',	// Int type (BMDSwitcherInputId), Get/Set
    bmdSwitcherMixEffectBlockPropertyIdTransitionPosition        = 'tsps',	// Float type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining = 'tfrm',	// Int type, Get only
    bmdSwitcherMixEffectBlockPropertyIdInTransition              = 'iits',	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining = 'ffrm',	// Int type, Get only
    bmdSwitcherMixEffectBlockPropertyIdInFadeToBlack             = 'iifb',	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdPreviewLive               = 'pvlv',	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdPreviewTransition         = 'pvts',	// Flag type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackRate           = 'ftbr'	// Int type, Get/Set
};

/* Enum BMDSwitcherConnectToFailure - used in ConnectTo */

typedef uint32_t BMDSwitcherConnectToFailure;
enum _BMDSwitcherConnectToFailure {
    bmdSwitcherConnectToFailureNoResponse                        = 'cfnr',
    bmdSwitcherConnectToFailureIncompatibleFirmware              = 'cfif'
};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherMixEffectBlockCallback;
class IBMDSwitcherMixEffectBlock;
class IBMDSwitcherInputCallback;
class IBMDSwitcherInput;
class IBMDSwitcherInputIterator;
class IBMDSwitcherMixEffectBlockIterator;
class IBMDSwitcherCallback;
class IBMDSwitcher;
class IBMDSwitcherDiscovery;

/* Interface IBMDSwitcherMixEffectBlockCallback - Mix Effect Block Notification Callback */

class IBMDSwitcherMixEffectBlockCallback : public IUnknown
{
public:
    virtual HRESULT PropertyChanged (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlockCallback () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixEffectBlock - Mix Effect Block */

class IBMDSwitcherMixEffectBlock : public IUnknown
{
public:
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMixEffectBlockCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMixEffectBlockCallback* callback) = 0;
    virtual HRESULT SetFlag (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* in */ bool value) = 0;
    virtual HRESULT GetFlag (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* out */ bool* value) = 0;
    virtual HRESULT SetInt (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* in */ int64_t value) = 0;
    virtual HRESULT GetInt (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* out */ int64_t* value) = 0;
    virtual HRESULT SetFloat (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* in */ double value) = 0;
    virtual HRESULT GetFloat (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* out */ double* value) = 0;
    virtual HRESULT SetString (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* in */ CFStringRef value) = 0;
    virtual HRESULT GetString (/* in */ BMDSwitcherMixEffectBlockPropertyId propertyId, /* out */ CFStringRef* value) = 0;
    virtual HRESULT PerformAutoTransition (void) = 0;
    virtual HRESULT PerformCut (void) = 0;
    virtual HRESULT PerformFadeToBlack (void) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlock () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputCallback - Base Switcher Input Object Callback */

class IBMDSwitcherInputCallback : public IUnknown
{
public:
    virtual HRESULT PropertyChanged (/* in */ BMDSwitcherInputPropertyId propertyId) = 0;

protected:
    virtual ~IBMDSwitcherInputCallback () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherInput - Base Switcher Input Object */

class IBMDSwitcherInput : public IUnknown
{
public:
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;
    virtual HRESULT SetFlag (/* in */ BMDSwitcherInputPropertyId propertyId, /* in */ bool value) = 0;
    virtual HRESULT GetFlag (/* in */ BMDSwitcherInputPropertyId propertyId, /* out */ bool* value) = 0;
    virtual HRESULT SetInt (/* in */ BMDSwitcherInputPropertyId propertyId, /* in */ int64_t value) = 0;
    virtual HRESULT GetInt (/* in */ BMDSwitcherInputPropertyId propertyId, /* out */ int64_t* value) = 0;
    virtual HRESULT SetFloat (/* in */ BMDSwitcherInputPropertyId propertyId, /* in */ double value) = 0;
    virtual HRESULT GetFloat (/* in */ BMDSwitcherInputPropertyId propertyId, /* out */ double* value) = 0;
    virtual HRESULT SetString (/* in */ BMDSwitcherInputPropertyId propertyId, /* in */ CFStringRef value) = 0;
    virtual HRESULT GetString (/* in */ BMDSwitcherInputPropertyId propertyId, /* out */ CFStringRef* value) = 0;
    virtual HRESULT GetInputId (/* out */ BMDSwitcherInputId* inputId) = 0;

protected:
    virtual ~IBMDSwitcherInput () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputIterator - Input Iterator */

class IBMDSwitcherInputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherInput** input) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherInputId inputId, /* out */ IBMDSwitcherInput** input) = 0;

protected:
    virtual ~IBMDSwitcherInputIterator () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixEffectBlockIterator - Mix Effect Block Iterator */

class IBMDSwitcherMixEffectBlockIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMixEffectBlock** mixEffectBlock) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlockIterator () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherCallback - Switcher Callback Delegate */

class IBMDSwitcherCallback : public IUnknown
{
public:
    virtual HRESULT PropertyChanged (/* in */ BMDSwitcherPropertyId propertyId) = 0;
    virtual HRESULT Disconnected (void) = 0;

protected:
    virtual ~IBMDSwitcherCallback () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcher - Switcher Object */

class IBMDSwitcher : public IUnknown
{
public:
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT SetFlag (/* in */ BMDSwitcherPropertyId propertyId, /* in */ bool value) = 0;
    virtual HRESULT GetFlag (/* in */ BMDSwitcherPropertyId propertyId, /* out */ bool* value) = 0;
    virtual HRESULT SetInt (/* in */ BMDSwitcherPropertyId propertyId, /* in */ int64_t value) = 0;
    virtual HRESULT GetInt (/* in */ BMDSwitcherPropertyId propertyId, /* out */ int64_t* value) = 0;
    virtual HRESULT SetFloat (/* in */ BMDSwitcherPropertyId propertyId, /* in */ double value) = 0;
    virtual HRESULT GetFloat (/* in */ BMDSwitcherPropertyId propertyId, /* out */ double* value) = 0;
    virtual HRESULT SetString (/* in */ BMDSwitcherPropertyId propertyId, /* in */ CFStringRef value) = 0;
    virtual HRESULT GetString (/* in */ BMDSwitcherPropertyId propertyId, /* out */ CFStringRef* value) = 0;

protected:
    virtual ~IBMDSwitcher () {}; // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery - Used to discover and connect to switchers */

class IBMDSwitcherDiscovery : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery () {}; // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBMDSwitcherDiscovery* CreateBMDSwitcherDiscoveryInstance (void);

};


#endif      // defined(__cplusplus)
#endif /* defined(BMD_BMDSWITCHERAPI_H) */
